

import datetime
import random




products = {
    101: {'name': 'redbull', 'price': 10, 'stock': 500}, # attribute:value
    102: {'name': 'coke', 'price': 1.0, 'stock': 500},
    103: {'name': 'pepsi', 'price': 5.0, 'stock': 500}, #we auto end in comma w/o problem
}




#customer = [101,'hello']
customers = {
    101: {'password': 'hello', 'status':'offline'},
    102: {'password': 'hey', 'status': 'offline'},
}




manager = {
    101: {'password': 'lmao'}
}




# #----------
order_id = 10000 #order id






orders = {} #dictionary to store orders






def calculate_order_price(product_id, quantity_purchased, customer_online):
    global products, order_id, orders


    product_price = products[product_id]['price']
    #we want to check if we have enough stock to sell


    order_price = product_price * quantity_purchased


    name = products[product_id]['name']




    #order date
    start = datetime.date(2024,1,1)
    end = datetime.date(2024,12,31)
    order_date = get_date(start, end)
    #print(f' order_date: {order_date}')  #DO NOT NEED THIS LINE OF CODE!!! :)


    #local dictionary to then store in bigger dictionary
    order_details = {}
    order_id += 1



    order_details['customer_id'] = customer_online
    order_details['order_date'] = order_date
    order_details['product_id'] = product_id
    order_details['name'] = name
    order_details['quantity'] = quantity_purchased
    order_details['price'] = order_price


    orders[order_id] = order_details
    #print(orders)
    #end update


    return order_price, order_date





def check_customer_online():
    #checking which customer is using it
    for cid in customers:
        customer_details = customers[cid]
        status = customer_details['status']
        if status == 'online':
            customer_online = cid # I am storing the id of customer online
        #now I put it in end of orders dictionary
    return customer_online


def submit():
    global products, order_id, orders, customers

    customer_online = check_customer_online()

    #first part to showcase products available
    for product_id in products:
        product_detail = products[product_id]

        name, price, stock =product_detail['name'], product_detail['price'], product_detail['stock']
        print(f'|{product_id:^5d}|{name:^10s}|{price:^8.2f}|{stock:^8d}|') 
        #need to hide stock for customer but display stock for manager


    #prompting user input
    product_chosen = int(input('Choose product one, two, or three > '))
    while product_chosen not in {1,2,3}: #validate user input. reprompt if wrong
        print(f'This should be 1, 2, or 3. You entered {product_chosen:d}')
        product_chosen = int(input('Choose product one, two, or three >> '))

    quantity_purchased = int(input('Quantity purchased >> '))

    # match. translate product selected by input to product_id
    ids = {1:101, 2:102, 3:103} #key:value pairs. I am stating the product_chosen:101
    product_id = ids[product_chosen] #dictionary[key] = value

    #checking if out of stock
    quantity_available = check_quantity(product_id)

    if quantity_available == 0:
        print('Out of stock for that product, sorry')
        return

    #checking if quantity can be purchased
    if quantity_purchased > quantity_available:
        print('Not enough stock for that order')
        return
    else:
        update_quantity(product_id, quantity_purchased)

    #compute order price: in price and quantity purchased
    order_price, order_date = calculate_order_price(product_id, quantity_purchased, customer_online)

    print(f'Order ID\t\t:{order_id}')
    print(f'Order Date\t\t:{order_date}')
    print(f'Product ID\t\t:{product_id}')
    print(f'Name\t\t\t:{name}')
    print(f'Quantity Purchased\t:{quantity_purchased}')
    print(f'Order Price\t\t:{order_price}')




def check_quantity(product_id):
    global products
    stock = products[product_id]['stock']    
    return stock




def update_quantity(product_id, quantity_purchased):
    global products
    products[product_id]['stock'] -= quantity_purchased




def display_order():
    global products, order_id, orders
    if not orders:#is orders empty?
        print('No data to display')
        return
    
    orders_available = 0
    for order_id in orders: #loop through every key in the values


        order_details = orders[order_id] #unpacking bigger dictionary into smaller one
        #then calling the keys of it

        customer_online = check_customer_online()

        if customer_online == order_details['customer_id']: #checking who is online to orderDetails
            orders_available = 1

    if orders_available != 1:
        print('No data to display')
        return 

    
    #must always check if a dictionary is empty before trying to retrieve data from it



    line = '-' * 72 #65+ 7 = 72
    print(line)
    print(f'|{"Order ID":^10s}|{"Order Date":^10s}|{"Product ID":^15s}|{"Name":^10s}|{"Quantity":^10s}|{"Price":^10s}|')
    print(line)




    for order_id in orders: #loop through every key in the values


        order_details = orders[order_id] #unpacking bigger dictionary into smaller one
        #then calling the keys of it

        customer_online = check_customer_online()

        if customer_online == order_details['customer_id']: #checking who is online to orderDetails
            order_date = order_details['order_date']
            product_id = order_details['product_id']
            name = order_details['name']
            quantity_purchased = order_details['quantity']
            order_price = order_details['price']
            print(f'|{order_id:^10d}|{order_date}|{product_id:^15d}|{name:^10s}|{quantity_purchased:^10d}|{order_price:^10.2f}|')


        #need to fix order_date format {order_date:^10s} does not want to work




def display_inventory():
    global products, order_id, orders
           
    print(f'ID\tName\tUnit Price\tStock\tIn Stock?')



    for product_id in products:
        product_detail = products[product_id]
       
        quantity_available = check_quantity(product_id)

        if quantity_available == 0:
            stock_status = 'No'
        else:
            stock_status = 'Yes'

        name, price, stock =product_detail['name'], product_detail['price'], product_detail['stock']
        print(f'{product_id:d}\t{name:s}\t{price:.2f}\t\t{stock:d}\t{stock_status:s}') #need to hide stock for customer but display stock for manager




    return product_id


def manager_display_order():
    global products, order_id, orders

    if not orders:#is orders empty?
        print('No data to display')
        return
    #must always check if a dictionary is empty before trying to retrieve data from it

    line = '-' * 72 #65+ 7 = 72
    print(line)
    print(f'|{"Order ID":^10s}|{"Order Date":^10s}|{"Product ID":^15s}|{"Name":^10s}|{"Quantity":^10s}|{"Price":^10s}|')
    print(line)



    for order_id in orders: #loop through every key in the values

        order_details = orders[order_id] #unpacking bigger dictionary into smaller one
        #then calling the keys of it


        order_date = order_details['order_date']
        product_id = order_details['product_id']
        name = order_details['name']
        quantity_purchased = order_details['quantity']
        order_price = order_details['price']
       


        print(f'|{order_id:^10d}|{order_date}|{product_id:^15d}|{name:^10s}|{quantity_purchased:^10d}|{order_price:^10.2f}|')
        #need to fix order_date format {order_date:^10s} does not want to work


def get_date(start_date, end_date):
    # start = datetime.date(2024,1,1)
    # end = datetime.date(2024,12,31)
    dates = []


    while start_date <= end_date:
        dates.append(start_date)
        start_date += datetime.timedelta(days=1)
        (order_date) = random.choice(dates)
        return (order_date)




def display_inventory():
    print(f'ID\tName\tUnit Price\tStock\tIn Stock?')


    for product_id in products:
        product_detail = products[product_id]
                   
        quantity_available = check_quantity(product_id)


        if quantity_available == 0:
            stock_status = 'No'
        else:
            stock_status = 'Yes'




        name, price, stock =product_detail['name'], product_detail['price'], product_detail['stock']
        print(f'{product_id:d}\t{name:s}\t{price:.2f}\t\t{stock:d}\t{stock_status:s}') #need to hide stock for customer but display stock for manager


   
   
def edit_prices():
    global products, order_id, orders
    display_inventory()
   


    print('Enter 1, 2, or 3 to change unit price of products 101, 102, 103.')
    product_chosen = 0


    while product_chosen not in {1, 2, 3, 4}:
        product_chosen = int(input('Enter 4 if you are done changing prices > '))
        #if 4 then stop back to loop
        if product_chosen == 4:
            #I am assuming I want to show the changes made?
            return


        ids = {1:101, 2:102, 3:103} #key:value pairs. I am stating the product_chosen:101
        product_id = ids[product_chosen] #dictionary[key] = value
        price = products[product_id]['price']
       
        #printing current
        print(f'Current unit price for product {product_id:d} is {price:.2f} ')
       
        #changing price
        products[product_id]['price'] = float(input('Enter new value for unit price >>'))


        #reupdating it
        price = products[product_id]['price']
        print(f'Price changed to {price:.2f} for product id {product_id:d}')




def reorder_inventory():
    global products, order_id, orders
   
   
    display_inventory()


    product_chosen = 0
    while product_chosen not in {1, 2, 3, 4}:
        product_chosen = int(input('Enter 1, 2, or 3 to reorder stock of product 101, 102, 103. '))
        #if 4 then stop back to loop
        if product_chosen == 4:
            #I am assuming I want to show the changes made?
            return
        ids = {1:101, 2:102, 3:103} #key:value pairs. I am stating the product_chosen:101


        product_id = ids[product_chosen] #dictionary[key] = value
        stock = products[product_id]['stock']


        #showcasing current stock of that inventory
        print(f'Current stock for product {product_id:d} is {stock:d} ')
        stock = int(input('Enter quantity to be ordered >>'))
       
        #updating stock
        products[product_id]['stock'] += stock
        stock = products[product_id]['stock']
        print(f'Stock changed to {stock:d} for product id {product_id:d}')




def verify_customer():
    global customers


    #customer_id, customer_password == 0


    customer_id = int(input('Enter ID >'))


    while customer_id not in customers:
        print ('Invalid login!')
        customer_id = int(input('Enter ID >'))

    #change customer status to online: true
    customers[customer_id]['status'] = 'online'




    customer_password = input('Enter Password >')




    while customer_password != customers[customer_id]['password']:
        customer_password = ''
        print('Invalid password!')
        customer_password = input('Enter Password >')
       
def verify_manager():
    global manager
   
    manager_id = int(input('Enter ID >'))




    while manager_id not in manager:
        manager_id = 0
        print ('Invalid login!')
        manager_id = int(input('Enter ID >'))
   
    manager_password = input('Enter Password >')


    while manager_password != manager[manager_id]['password']:
        manager_password = ''
        print('Invalid password!')
        manager_password = input('Enter Password >')


quit = False
while not quit:
    print('1.login 2. Quit')
    choice = int(input('Enter 1 or 2 >>'))
    if choice == 1:
            #change customer status to offlin when reentering
            for customer_id in customers:
                customers[customer_id]['status'] = 'offline'

       

            print('Choose 1 for customer or 2 for manager')
            choice = int(input('Enter 1 or 2 >>'))
            if choice == 1: #customer
                
                verify_customer()
                while True:

                    print('1. submit order 2.Display Order 3.Logout 4.exit')
                    choice = int(input('choose 1,2,3 or 4>> '))
                    if choice == 1:
                        submit()
                    elif choice == 2:
                        display_order()
                    elif choice == 3:
                        break  #this is what will let me leave current loop and go back to main loop
                    elif choice == 4:
                        quit = True #this stops this function / loop and returns that quit = true
                        break #this passes everything past this to back to begining of loop

                    #quit equals true ends program
            elif choice == 2:
                verify_manager()
                while True: # screen 2a
                    print('1. Display Order 2. Edit Prices 3. Reorder Inventory 4.Logout 5.exit')
                    choice = int(input('choose 1, 2 ,3, 4, or 5 >> '))
                    if choice == 1:
                        manager_display_order()
                    elif choice == 2:
                        edit_prices()
                    elif choice == 3:
                        reorder_inventory()
                    elif choice == 4:
                    
                        break  #this is what will let me leave current loop and go back to main loop
                    elif choice == 5:
                        quit = True #this stops this function / loop and returns that quit = true
                        break
                    #quit equals true ends program
    elif choice == 2:
        quit = True
